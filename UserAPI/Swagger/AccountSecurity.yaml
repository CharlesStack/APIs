swagger: "2.0"
info:
  title: Account Security API
  description: >
    This document provides a Swagger specification for the Account Security Portion of the User Management Service API.


    Copyright (c) 2019, Charles Stack of Mind2Mobile.  All Rights Reserved


    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

  version: 0.0.1

host: localhost:8080
schemes:
  - http
  - https

basePath: /v1
produces:
  - application/json
consumes:
  - application/json

securityDefinitions:

  APIClientKey:
    type: apiKey
    in: header
    name: X-ApiClientKey
    description: >-
      This header represents a unique instance of the API that is assigned to a client or application.
  APIClientSecret:
    type: apiKey
    in: header
    name: X-ApiClientSecret
    description: >-
      This header identifies the password associated with the APIClientKey.  This value can be changed if compromised.
  UserAuth:
    type: apiKey
    in: header
    name: X-UserAuth
    description: >-
      This header is a unique value assigned to a user after login and it grants them the ability to use the API within the context of the grants of the APIClientKey.  It is needed to authorize certain API calls.
  AdminAuth:
    type: apiKey
    in: header
    name: X-AdminAuth
    description: >-
      This header is a unique value assigned to a user with Administrative privledges. It is necessary for call requiring a higher level of priviledge.

paths:

  '/users/{userId}/tfa':
    get:
      tags:
        - Account Security
      summary: Request a TFA code via SMS (SMS method must be enabled).
      description: ->
      operationId: sendUserTFABySMS
      security:
        - APIClientKey: []
        - APIClientSecret: []
      parameters:
        - name: userId
          in: path
          description: >-
            The UUID of the User
          required: true
          type: string
          format: uuid
      responses:
        '203':
          description: Ok. No Content
        '400':
          description: Malformed or Bad Request
          schema:
            type: object
            items:
              $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            type: object
            items:
              $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            type: object
            items:
              $ref: '#/definitions/ErrorResponse'
        '405':
          description: Not Allowed
          schema:
            type: object
            items:
              $ref: '#/definitions/ErrorResponse'
        '501':
          description: Not Implemented
          schema:
            type: object
            items:
              $ref: '#/definitions/ErrorResponse'

  '/users/{userId}/tfa/{enable}':
    post:
      tags:
        - Account Security
      summary: Enable or Disable Two Factor Authentication
      description: >-
        This API call enables or disables two factor authentication for the user.

        When initially enabling TFA, no credential payload is required.  The response, if successful, includes the URL that can be imported by an authenticator app as well as an QR Code image, mime-encoded, and in the desired format.

        The credential payload is required when disabling TFA.  If the useSMS=true was used, the code supplied in the SMS is what should be entered in the payload.
        If useSMS=false or omitted, the code supplied should be that generated by an authenticator.

        Only after the a valid TFA code is submitted via the payload will the desired action be taken.

        Note (1) - when disabling TFA, ALL methods for TFA are disabled and removed from the account.

        Note (2) - When enabling TFA, the authenticator link is supplied only once and is not recoverable by the user.  You must disable TFA and reenable it to get a new authenticator link.

      operationId: setUserTFA
      security:
        - UserAuth: []
        - APIClientKey: []
        - APIClientSecret: []
      parameters:
        - name: phase
          in: query
          description: >-
            Enabling TFA is a two phase process.

            In phase=1, the desired action is specified as a query.  The response includes the URL for an authenticator app to use.
            In phase=2, the credentials are passed and include the a TFA code generated by the authenticator app to activate TFA on the account.

            Disabling TFA is,a one or two step process.
            If the TFA code is generated by an authenticator, it can be included in the body and the phase query param can be omitted or set to 1.
            If the TFA code is being sent via SMS (phase=1 and useSMS=true) then, upon receiving the SMS code, the code must be specified in the payload and the query parameters, phase=2 and useSMS=true, must be set.
          required: false
          type: integer

        - name: useSMS
          in: query
          description: >-
            The method must be specified if SMS is being used to deliver a one-time code.  Use useSMS=false to have a one-time code sent to the cellphone number specified in the account.  If no cellphone has been provided, the call will fail and the desired action will not occur.
          required: false
          type: boolean

        - name: userId
          in: path
          description: >-
            The UUID of the User
          required: true
          type: string
          format: uuid

        - name: enable
          in: path
          description: >-
            A flag enabling or disabling Two Factor Authentication.
          required: true
          type: boolean

        - name: credentials
          in: body
          description: >-
            A valid set of login credentials.
          required: false
          schema:
            $ref: '#/definitions/UserLoginRequest'

      responses:
        '201':
          description: Ok. Two Factor Authentication Enabled. Result is the 2FA URL
          schema:
            type: object
            items:
              $ref: '#/definitions/TFAInfoResponse'
        '400':
          description: Malformed or Bad Request
          schema:
            type: object
            items:
              $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized
          schema:
            type: object
            items:
              $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            type: object
            items:
              $ref: '#/definitions/ErrorResponse'
        '501':
          description: Not Implemented
          schema:
            type: object
            items:
              $ref: '#/definitions/ErrorResponse'

definitions:

  ErrorResponse:
    description: >-
      The ErrorResponse object provides additional information of a standard response
    type: object
    properties:
      code:
        description:
          The particular HTTP response code
        type: integer
        default: 200
      subCode:
        description:
          The particular application error code (optional)
        type: integer
        default: 0
      timestamp:
        description: >-
          The date and time the error was generated.
        type: string
        format: date-time
        example: "2019-06-01T10:40:52Z"
      message:
        type: string
        default: ""


  UserLoginRequest:
    description: >-
      The UserLoginRequest object is passed to supply credentials during login.
    type: object
    properties:
      userName:
        description: >-
          This is the User supplied identifier or email address
        type: string
        default: ""
        example: "joesmith"
      password:
        description: >-
          This is the User's Password
        type: string
        format: password
        minLength: 8
        maxLength: 20
        example: "p@ssw0rd1"
      twoFactorCode:
        description: >-
          This is the generated Two Factor Authentication code. This code is created using either an authenticator app or sent by SMS if the useSMS option was enabled.
        type: string
        minLength: 6
        maxLength: 6
        example: "683124"

  TFAInfoResponse:
    description: >-
      This object describes the TFA info established on the User account.
    type: object
    properties:
      methods:
        description: >-
          The methods configured for Two Factor Authentication.  By default, QRCode will be provided when TFA is enabled.  If the SMS option is configured, this will also be set.
            Valid values: Authenticator, SMS
        type: array
        items:
          type: string
        default: []
        example: ["Authenticator", "SMS"]
      uri:
        description: >-
          A URI containing the Google Authenticator information for this login
        type: string
        format: url
        example: ""
      image:
        description: >-
          A MIME (Base64) encoded image containing the QR Code for the URL
        type: string
      imageFmt:
        description: >-
          Indicates the format of the image used to hold the QR Code.  This can be (PNG, PDF, BMP, SVG)
        type: string
        minLength: 0
        maxLength: 3
        example: "PDF"